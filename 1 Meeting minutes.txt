
Minutes of meeting
==================

Upon meeting the Music Team Officer, the following requirements were discussed:

The program inputs and outputs will be through the command line.

The user needs a menu option to select actions between:
1. Create a musician 
2. Create a troupe
3. Add musician to troupe
4. Provide a summary description of troupe
5. Provide a detailed description of troupe
6. Calculate the cost of deploying the troupe for a number of hours
7. Read a list of troupe names to be populated from a text file
8. Write a list of the detailed descriptions for all troupes to a given filename

While creating a musician, the user should be able to select the type of musician he/she wants to upload details for and then upload details of name, yrs playing and hourly rate, one at a time. There are constraints to each user input.

While creating a troupe, the user can offer values like troupe name, number of instruments, genre, minimum duration of a booking, hourly rate of troupe. 

While adding musician to troupe, the user can opt any number between 2 to 5 musicians

The troupe hourly rate determines the calculation for troupe. The troupe hourly rate is independent of the musician's hourly rates.

The user will specify the filename containing troupe names, that needs to be read (using readlist)

The user will specify which filename will the troupe descriptions be written to. This is different from the read file.

As an assumption, a given musician can only be mapped to one troupe. The troupes can have any number of members between 2-5.



From the above discussion, this is my understanding of the design:

The data structures – I intend on using classes for musicians, objects for troupe definitions. There will be methods/functions catering to each action item on the menu

Class ‘Musician’ will have the following data/properties - Musician Name, Instrument, Interesting fact, Yrs of playing the instrument, Hourly rate for musician.
The 4 different Instrumentalist sub-classes will inherit all properties from Musician class. Added to that, the child classes will have the ‘interesting fact’ property which will be the fixed for an instrumentalist subclass.

In the classes, the relevant attributes will get defines as class properties and the class methods will be to parse user inputs, match it against constraints, and push the values into the collections
In some cases, the methods will output values, error messages, read from files or write to a file.
	
We will need prompt sync to accept user input
	
Conditional statements will check for constraints on user values 


Set and get will allow for mapping user inputs to class properties


ReadList will be used to read text file contents (for troupe name-list)

Loops will be used for printing/writing troupe details 
